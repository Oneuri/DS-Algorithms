#include<iostream>
using namespace std;
struct avl_node
{
    int data;
    struct avl_node *left;
    struct avl_node *right;
}*root;
class avlTree
{
    public:
        int height(avl_node *);
        int diff(avl_node *);
        avl_node *rr_rotation(avl_node *);
        avl_node *ll_rotation(avl_node *);
        avl_node *lr_rotation(avl_node *);
        avl_node *rl_rotation(avl_node *);
        avl_node *balance(avl_node *);
        avl_node *insert(avl_node *, int );
        void display(avl_node *, int);
        void deletes();
        avlTree()
        {
            root = NULL;
        }
};
 
/*
 * Main Contains Menu
 */
int main()
{
    int ch, item;
    avlTree avl;
    do
    {
        cout<<"\n AVL Tree Implementation \n"<<endl;
		cout<<"Enter your Choice: \n1]Insert \n2]Display \n3]Delete \n4]Exit point"<<endl;
        cin>>ch;
        switch(ch)
        {
        case 1:
            cout<<"Enter value to be inserted: ";
            cin>>item;
            root = avl.insert(root, item);
            break;
        case 2:
            if (root == NULL)
            {
                cout<<"Tree is Empty"<<endl;
                continue;
            }
            cout<<"Balanced AVL Tree:"<<endl;
            avl.display(root, 1);
            break;
            
        case 3:
			avl.deletes();
			break;
			   
        case 4:
            cout<<"Exit point"<<endl;    
            break;
        default:
            cout<<"Wrong Choice"<<endl;
        };
    }while(ch!=4);
    
}
 
/*
 * Height of AVL Tree
 */
int avlTree::height(avl_node *temp)
{
    int h=0;
    if (temp!=NULL)
    {
        int l_height = height(temp->left);
        int r_height = height(temp->right);
        int max_height = max(l_height, r_height);
        h = max_height + 1;
    }
    return h;
}
 
/*
 * Height Difference 
 */
int avlTree::diff(avl_node *temp)
{
    int l_height = height (temp->left);
    int r_height = height (temp->right);
    int b_factor= l_height - r_height;
    return b_factor;
}
 
/*
 * Right- Right Rotation
 */
avl_node *avlTree::rr_rotation(avl_node *parent)
{
    avl_node *temp;
    temp = parent->right;
    parent->right = temp->left;
    temp->left = parent;
    return temp;
}
/*
 * Left- Left Rotation
 */
avl_node *avlTree::ll_rotation(avl_node *parent)
{
    avl_node *temp;
    temp = parent->left;
    parent->left = temp->right;
    temp->right = parent;
    return temp;
}
 
/*
 * Left - Right Rotation
 */
avl_node *avlTree::lr_rotation(avl_node *parent)
{
    avl_node *temp;
    temp = parent->left;
    parent->left = rr_rotation (temp);
    return ll_rotation (parent);
}
 
/*
 * Right- Left Rotation
 */
avl_node *avlTree::rl_rotation(avl_node *parent)
{
    avl_node *temp;
    temp = parent->right;
    parent->right = ll_rotation (temp);
    return rr_rotation (parent);
}
 
/*
 * Balancing AVL Tree
 */
avl_node *avlTree::balance(avl_node *temp)
{
    int bal_factor = diff (temp);
    if (bal_factor > 1)
    {
        if (diff (temp->left) > 0)
            temp = ll_rotation (temp);
        else
            temp = lr_rotation (temp);
    }
    else if (bal_factor < -1)
    {
        if (diff (temp->right) > 0)
            temp = rl_rotation (temp);
        else
            temp = rr_rotation (temp);
    }
    return temp;
}
 
/*
 * Insert Element into the tree
 */
avl_node *avlTree::insert(avl_node *root, int value)
{
    if (root == NULL)
    {
        root = new avl_node;
        root->data = value;
        root->left = NULL;
        root->right = NULL;
        return root;
    }
    else if (value < root->data)
    {
        root->left = insert(root->left, value);
        root = balance (root);
    }
    else if (value >= root->data)
    {
        root->right = insert(root->right, value);
        root = balance (root);
    }
    return root;
}
 
/*
 * Display AVL Tree
 */
void avlTree::display(avl_node *ptr, int level)
{
    int i;
    if (ptr!=NULL)
    {
        display(ptr->right, level + 1);
        printf("\n");
        if (ptr == root)
        cout<<"Root -> ";
        for (i = 0; i < level && ptr != root; i++)
            cout<<"        ";
        cout<<ptr->data;
        display(ptr->left, level + 1);
    }
}
void avlTree::deletes()
{
	avl_node *temp,*parent=NULL,*father,*r,*son;
	temp=root;
	int n;
	cout<<"Enter data to be deleted :\n";
	cin>>n;
	while((temp->data!=n)&&(temp!=NULL))
	{
		if(n<(temp->data))
		  {
			parent=temp;
			temp=temp->left;
	  	  }
		else
		  {
			parent=temp;
			temp=temp->right;
		  }
	}
	if(temp==NULL)
	{
		cout<<"Number not found"<<endl;
		return;
	}
	if(temp->left==NULL)
		{
			r=temp->right;
		}
	else
		if(temp->right==NULL)
			r=temp->left;
		else
		{
			father=temp;
			r=temp->right;
			son=r->left;
			while(son!=NULL)
			{	
				father=r; 
				r=son;
				son=r->left;
			}
			if (father!=temp)
			{
				father->left=r->right;
				r->right=temp->right;
			}
			r->left=temp->left;
		}
	if(parent==NULL)
 		root=r;
	else
		if(temp==parent->left)
			parent->left=r;
		else
			parent->right=r;
	delete temp;
	return ;
}
