#include<iostream>
using namespace std;
class Node{
	public:
		int data;
		Node *next,*prev;
};
class List:public Node{
	Node *listptr,*temp;
	public:
		List()
		{
			listptr=NULL;
			temp=NULL;
		}
		void create();
		void display();
		void concatenate(List &list2);
		void merge(List &list1,List &list2);
		void union1(List &list1,List &list2);
		void intersection(List &list1,List &list2);
};
int main()
{
	List list1,list2,mlist,ulist,ilist;
	int ch;
	while(1)
	{
		cout<<"\nChoices: [1]Create List1 [2]Display List1 [3]Create List2 [4]Display List2 [5]Concatenate [6]Merge [7]Union [8]Intersection [9]Exit"<<endl;
		cout<<"Enter choice: ";
		cin>>ch;
		switch(ch)
		{
			case 1:
				list1.create();
				break;
			case 2:
				list1.display();
				break;
			case 3:
				list2.create();
				break;
			case 4:
				list2.display();
				break;
			case 5:
				list1.concatenate(list2);
				break;
			case 6:
				mlist.merge(list1,list2);
				mlist.display();
				break;
			case 7:
				ulist.union1(list1,list2);
				ulist.display();
				break;
			case 8:
				ilist.intersection(list1,list2);
				break;
			case 9:
				cout<<"Exiting...";
				return 0;
				break;
			default:
				cout<<"Invalid choice"<<endl;
		}
	}
	return 0;
}
void List::create()
{
	int num;
	cout<<"Enter data: ";
	cin>>num;
	Node *newnode=new Node;
	newnode->data=num;
	newnode->next=NULL;
	newnode->prev=NULL;
	if(listptr==NULL)
	{
		listptr=newnode;
		temp=listptr;
	}
	else
	{
		temp->next=newnode;
		newnode->prev=temp;
		temp=temp->next;
	}
}
void List::display()
{
	Node *temp=listptr; //new temp
	while(temp!=NULL)
	{
		cout<<temp->data<<"<->";
		temp=temp->next;
	}
	cout<<"NULL";
}
void List::concatenate(List &list2)
{
	Node *temp1=listptr;
	while(temp1->next!=NULL)
	{
		temp1=temp1->next;
	}
	Node *temp2=list2.listptr;
	while(temp2!=NULL)
	{
		Node *newnode=new Node;
		newnode->data=temp2->data;
		newnode->next=NULL;
		newnode->prev=NULL;
		if(temp1==NULL)
		{
			listptr=newnode;
			temp1=listptr;
		}
		else
		{
			temp1->next=newnode;
			newnode->prev=temp1;
			temp1=temp1->next;
		}
		temp2=temp2->next;
	}
}
void List::merge(List &list1,List &list2)
{
	int count;
	Node *temp1=list1.listptr;
	Node *temp2=list2.listptr;
	Node *temp=listptr;
	while(temp1!=NULL||temp2!=NULL)
	{
		count=0;
    	while(temp1!=NULL&&count<2)
    	{	
    		Node *newnode=new Node;
        	newnode->data=temp1->data;
        	newnode->next=NULL;
        	newnode->prev=NULL;
        	if(temp==NULL)
        	{
        		listptr=newnode;
        		temp=listptr;
        	}
        	else
        	{
        		temp->next=newnode;
        		newnode->prev=temp;
        		temp=temp->next;
        	}
        	count++;
        	temp1=temp1->next;
    	}
    	count=0;
    	while(temp2!=NULL&&count<2)
    	{	
    		Node *newnode1=new Node;
        	newnode1->data=temp2->data;
        	newnode1->next=NULL;
        	newnode1->prev=NULL;
        	if(temp==NULL)
        	{
        		listptr=newnode1;
        		temp=listptr;
        	}
        	else
        	{
        		temp->next=newnode1;
        		newnode1->prev=temp;
        		temp=temp->next;
        	}
        	count++;
        	temp2=temp2->next;
    	}
	}
}
void List::union1(List &list1,List &list2)
{
	Node *temp1=list1.listptr;
	while(temp1->next!=NULL)
	{
		temp1=temp1->next;
	}
	Node *temp2=list2.listptr;
	while(temp2!=NULL)
	{
		Node *newnode=new Node;
		newnode->data=temp2->data;
		newnode->next=NULL;
		newnode->prev=NULL;
		if(temp1==NULL)
		{
			list1.listptr=newnode;
			temp1=list1.listptr;
		}
		else
		{
			temp1->next=newnode;
			newnode->prev=temp1;
			temp1=temp1->next;
		}
		temp2=temp2->next;
	}
	//lists concatenated
    Node *i,*j;   	
	int t;
	for(i=list1.listptr;i->next!=NULL;i=i->next)
   	{
        for(j=i->next;j!=NULL;j=j->next)
    	{
    		if(i->data>j->data)
    		{
    			t=i->data;
    			i->data=j->data;
    			j->data=t;
    		}
    	}
    }
    //list sorted
    temp1=list1.listptr;
    Node *temp=listptr;
    while(temp1!=NULL)
    {
    	if(temp1->next!=NULL&&temp1->data!=temp1->next->data)
    	{
    		Node *newnode1=new Node;
            newnode1->data=temp1->data;
            newnode1->next=NULL;
            newnode1->prev=NULL;
            if(listptr==NULL)
            {
            	listptr=newnode1;
            	temp=listptr;
            }
           	else
           	{
           	    temp->next=newnode1;
           		newnode1->prev=temp;
           		temp=temp->next;
           	}
		}
		else
		{
			if(temp1->next==NULL)
	    	{
	    		Node *newnode2=new Node;
                newnode2->data=temp1->data;
                newnode2->next=NULL;
                newnode2->prev=NULL;
                temp->next=newnode2;
                newnode2->prev=temp;
                temp=temp->next;
	    	}
		}
    	temp1=temp1->next;
	}
}
void List::intersection(List &list1,List &list2)
{
	Node *temp=listptr;
	Node *temp1,*temp2;
	for(temp1=list1.listptr;temp1!=NULL;temp1=temp1->next)
	{
		for(temp2=list2.listptr;temp2!=NULL;temp2=temp2->next)
		{
			if(temp1->data==temp2->data)
			{
				Node *newnode=new Node;
    	    	newnode->data=temp1->data;
    	    	newnode->next=NULL;
	        	newnode->prev=NULL;
	        	if(listptr==NULL)
	        	{
	        		listptr=newnode;
	        		temp=listptr;
	        	}
	        	else
	        	{
	        		temp->next=newnode;
	        		newnode->prev=temp;
	        		temp=temp->next;
	        	}
			}
		}
	}
	Node *i,*j;   	
	int t;
	for(i=listptr;i->next!=NULL;i=i->next)
   	{
        for(j=i->next;j!=NULL;j=j->next)
    	{
    		if(i->data>j->data)
    		{
    			t=i->data;
    			i->data=j->data;
    			j->data=t;
    		}
    	}
    }
    temp=listptr;
    while(temp!=NULL)
    {
    	if(temp->next!=NULL&&temp->data==temp->next->data)
    	{
    		cout<<temp->data<<"->";
		}
		else
		{
			if(temp->next==NULL)
			{
				cout<<temp->data<<"<->NULL";
			}
		}
		temp=temp->next;
	}
}
