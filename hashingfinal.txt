#include<stdio.h>
#include<stdlib.h>
#include<iostream>
 
using namespace std;

#define buck 5

class node
{
	public:
		node *next;
		int data;
};

class list: public node
{
	node* hasht[100];
	int i;
	public:
		list()
		{
			for(int i=0;i<100;i++)
			{
				hasht[i]=NULL;
			}
		}
		
		void chaining(int,int);
		void display_chaining();
};

void chaining_wrep(int add,int id,int hashc[100],int chain[100])
{
	int i=0,j=0;
	while(i!=add&&i!=100)
	{
		i++;
	}
	if(i!=add)
	{
		cout<<"Wrong input\n";
	}
	else
	{
		if(hashc[i]==0)
		{
			hashc[i]=id;
		}
		else
		{
			j=i;
			while(hashc[i]!=0&&i!=100)
			{
				i++;
			}
			hashc[i]=id;
			chain[j]=i;
		}
	}
}

void display_chaining_wrep(int hashc[100],int chain[100])
{
	int i=0;
	cout<<"No.\tHash Table\tChain\n";
	for(i=0;i<100;i++)
	{
		if(hashc[i]!=0)
		{
			cout<<i<<"\t"<<hashc[i]<<"\t\t"<<chain[i]<<endl;
		}
	}
}

void linear_probing(int add,int id,int hash[100][buck+1])
{
	int i=0,j=1;
	while(i!=add&&i!=100)
	{
		i++;
	}
	while(hash[i][j]!=0&&j!=buck+1)
	{
		j++;
	}
	if(j==buck+1)
	{
		cout<<"Overflow caused\n";
	}
	else
	{
		hash[i][j]=id;
	}
}

void display_linear_probing(int hash[100][buck+1])
{
	int i,j;
	for(i=0;i<100;i++)
	{
		j=1;
		while(hash[i][j]!=0)
		{
			cout<<i<<"\t";
			for(j=1;j<buck+1;j++)
			{
				cout<<hash[i][j]<<"\t";
			}
			cout<<endl;
		}
	}
}

void list :: chaining(int add,int id)
{
	int i=0;
	node *newnode=new node,*temp;
	newnode->data=id;
	while(i!=add&&i!=100)
	{
		i++;
	}
	if(i!=add)
	{
		cout<<"Wrong input";
	}
	else
	{
		temp=hasht[i];
		if(temp==NULL)
		{
			hasht[i]=newnode;
			newnode->next=NULL;
		}
		else
		{
			temp=hasht[i];
			while(temp->next!=NULL)
			{
				temp=temp->next;
			}
			temp->next=newnode;
			newnode->next=NULL;
		}
	}
}

void list :: display_chaining()
{
	int i=0;
	node *temp;
	for(i=0;i<100;i++)
	{
		if(hasht[i]!=NULL)
		{
			temp=hasht[i];
			cout<<i<<"\t"<<temp->data;
			temp=temp->next;
			while(temp!=NULL)
			{
				cout<<"\t"<<temp->data;
				temp=temp->next;
			}
			cout<<"\n";
		}
	}
}


int mid_squaring(int id)
{
	int x=id*id,y,r=0,num,arr[10];
	y=x;
	while(x!=0)
	{
		r++;
		arr[r]=x%10;
		x=x/10;
	}
	if(r%2==0)
	{
		num=arr[(r/2)+1]*10+arr[(r/2)];
	}
	else
	{
		num=arr[(r/2)+1];
	}
	return num;
}

int shift_folding(int id)
{
	int add=0,x=id,num[10],i;
	for(i=0;i<10;i++)
	{
		num[i]=0;
	}
	i=0;
	while(x!=0)
	{
		num[i++]=x%10;
		x=x/10;
	}
	for(i=0;i<10;i++)
	{
		if(i%2==0||i==0)
		{
			add=add+num[i];
		}
		else
		{
			add=add+(num[i]*10);
		}
	}
	return add;
}

int modulo(int id,int mod)
{
	int add;
	add=id%mod;
	return add;
}

void chaining_rep(int add,int id,int hashc[100],int chain[100],int num,int mod)
{
	list l;
	int i=0,j=0,add1;
	while(i!=add&&i!=100)
	{
		i++;
	}	
	if(i!=add)
	{
		cout<<"Wrong input\n";
	}
	else
	{
		if(hashc[i]==0)
		{
			hashc[i]=id;
		}
		else
		{
			if(num==1)
			{
				add1=mid_squaring(hashc[i]);
			}
			else if(num==2)
			{
				add1=shift_folding(hashc[i]);
			}
			else if(num==3)
			{
				add1=modulo(hashc[i],mod);
			}
			if(add1==i)
			{
				j=i;
				while(i!=100&&hashc[i]!=0)
				{
					i++;
				}
				hashc[i]=id;
				chain[j]=i;
			}
			else
			{
				j=hashc[i];
				hashc[i]=id;
				while(i!=100&&hashc[i]!=0)
				{
					i++;
				}
				hashc[i]=j;
				chain[add1]=i;
			}
		}
	}
}

void quadratic(int add,int id,int hashc[100],int num,int mod)
{
	int i=0,add1,j;
	while(i!=add&&i!=100)
	{
		i++;
	}
	if(i==100)
	{
		cout<<"Incorrect address generated\n";
	}
	else
	{
		if(hashc[i]==0)
		{
			hashc[i]=id;
		}	
		else
		{
			if(num==1)
			{
				add1=i;
				j=1;
				while(hashc[add1]!=0)
				{
					add1=mid_squaring(id+j*j);
					j++;
				}
				hashc[add1]=id;
			}
			else if(num==2)
			{
				add1=i;
				j=1;
				while(hashc[add1]!=0)
				{
					add1=shift_folding(id+j*j);
					j++;
				}
				hashc[add1]=id;
			}
			else if(num==3)
			{
				add1=i;
				j=1;
				while(hashc[add1]!=0)
				{
					add1=modulo((id+j*j),mod);
					j++;
				}
				hashc[add1]=id;
			}
		}
	}
}

void display_quadratic(int hashc[100])
{
	int i=0;
	for(i=0;i<100;i++)
	{
		if(hashc[i]!=0)
		{
			cout<<i<<"\t"<<hashc[i]<<"\n";
		}
	}
}

void collision(int add,int id,int hash[100][buck+1],int hashc[100],int chain[100],int num,int c,int mod)
{
	list l;
	switch(c)
	{
		case 1:
			linear_probing(add,id,hash);
			display_linear_probing(hash);
			break;
		case 2:
			quadratic(add,id,hashc,num,mod);
			display_quadratic(hashc);
			break;
		case 3:
			l.chaining(add,id);
			l.display_chaining();
			break;
		case 4:
			chaining_wrep(add,id,hashc,chain);
			display_chaining_wrep(hashc,chain);
			break;
		case 5:
			chaining_rep(add,id,hashc,chain,num,mod);
			display_chaining_wrep(hashc,chain);
			break;
		default:
			cout<<"Incorrect choice\n";
			break;
	}
}

int main()
{
	int num,i,j,id,add,c,mod=0;
	char choice,ch;
	int hashc[100],chain[100];
	for(i=0;i<100;i++)
	{
		hashc[i]=chain[i]=0;
	}
	int hash[100][buck+1];
	for(i=0;i<100;i++)
	{
		for(j=0;j<buck+1;j++)
		{
			hash[i][j]=0;
		}
	}
	cout<<"1.Mid square hashing\n2.Shift folding\n3.Modulo\n";
	cin>>num;
	switch(num)
	{	
		case 1:
			cout<<"Open Addressing Mechanisms : \n1.Linear Probing(with 5 buckets)\n2.Quadratic Probing\nChaining : \n3.Chaining(using linked lists)\n4.Chaining(without replacement)\n5.Chaining(with replacement)\nEnter your choice\n";
			cin>>c;
			do
			{
				cout<<"Enter the identifier\n";
				cin>>id;
				add=mid_squaring(id);
				collision(add,id,hash,hashc,chain,num,c,mod);
				cout<<"Do you want to enter more identifiers?(y/n)\n";
				cin>>choice;
			}while(choice=='y'||choice=='Y');
			break;
		case 2:
			cout<<"Open Addressing Mechanisms : \n1.Linear Probing(with 5 buckets)\n2.Quadratic Probing\nChaining : \n3.Chaining(using linked lists)\n4.Chaining(without replacement)\n5.Chaining(with replacement)\nEnter your choice\n";
			cin>>c;
			do
			{
				cout<<"Enter the identifier\n";
				cin>>id;
				add=shift_folding(id);
				collision(add,id,hash,hashc,chain,num,c,mod);
				cout<<"Do you want to enter more identifiers?(y/n)\n";
				cin>>choice;
			}while(choice=='y'||choice=='Y');
			break;
		case 3:
			cout<<"Enter the number to be used for the modulo function\n";
			cin>>mod;
			cout<<"Open Addressing Mechanisms : \n1.Linear Probing(with 5 buckets)\n2.Quadratic Probing\nChaining : \n3.Chaining(using linked lists)\n4.Chaining(without replacement)\n5.Chaining(with replacement)\nEnter your choice\n";
			cin>>c;
			do
			{
				cout<<"Enter the identifier\n";
				cin>>id;
				add=modulo(id,mod);
				collision(add,id,hash,hashc,chain,num,c,mod);
				cout<<"Do you want to enter more identifiers?(y/n)\n";
				cin>>choice;
			}while(choice=='y'||choice=='Y');
			break;
		default:
			cout<<"Incorrect input\n";
			break;	
	}
	return 0;
}

